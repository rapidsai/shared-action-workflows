name: cibuildwheel
description: 'Installs pipx to run cibuildwheel on the current runner with some opinionated settings for RAPIDS'
inputs:
  package-dir:
    description: 'Path to python package'
    required: true
  output-dir:
    description: 'Path to output wheels to'
    required: true
  manylinux-platform:
    description: 'Manylinux platform to repair to'
    required: true
  internal-pypi-user:
    description: 'Username for pypi.k8s.rapids.ai'
    required: true
  internal-pypi-pass:
    description: 'Password for pypi.k8s.rapids.ai'
    required: true
  build-sdist-on-arch:
    description: 'Which arch to build the sdist from'
    required: false
    default: ''
  cibw-before-all:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands'
    required: false
    default: ''
  cibw-before-build:
    description: 'Extra CIBW_BEFORE_BUILD_LINUX commands'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Install python3.8, venv, pip on runner container
      run: sudo apt update -y && sudo apt install -y python3.8-venv python3-venv python3-pip
      shell: bash

    - name: Install pipx
      run: |
        python3 -m pip install pipx
        python3 -m pipx ensurepath --force
      shell: bash

    - name: Create conditional env vars with bash
      run: |
        arch=$(uname -m)

        # set arch according to runner arch
        echo "CIBW_ARCHS_LINUX=${arch}" >> "${GITHUB_ENV}"

        # set before-all-linux command to:
        #   1. store internal pypi credentials in .netrc
        #   2. append `&& inputs.cibw-before-all` if it's not empty
        if [ "${{ inputs.cibw-before-all }}" != "" ]; then
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc && ${{ inputs.cibw-before-all }}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc" >> "${GITHUB_ENV}"
        fi

        # set before-build-linux command to:
        #   1. install build-time deps and generate sdist if arch is specified for sdist
        #   2. run `inputs.cibw-before-all` if it's not empty
        if [ "${{ inputs.build-sdist-on-arch }}" == "${arch}" ] && [ "${{ inputs.cibw-before-build }}" != "" ]; then
          echo "CIBW_BEFORE_BUILD_LINUX=/install-build-requirements.sh {package} && python3 {package}/setup.py sdist -d ${{ inputs.output-dir }} && ${{ inputs.cibw-before-build }}" >> "${GITHUB_ENV}"
        elif [ "${{ inputs.build-sdist-on-arch }}" == "${arch}" ]; then
          echo "CIBW_BEFORE_BUILD_LINUX=/install-build-requirements.sh {package} && python3 {package}/setup.py sdist -d ${{ inputs.output-dir }}" >> "${GITHUB_ENV}"
        elif [ "${{ inputs.cibw-before-build }}" != "" ]; then
          echo "CIBW_BEFORE_BUILD_LINUX=${{ inputs.cibw-before-build }}" >> "${GITHUB_ENV}"
        fi

        echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel repair -w {dest_dir} --plat ${{ inputs.manylinux-platform }}_${arch} {wheel} || true" >> "${GITHUB_ENV}"
      shell: bash

    - name: Invoke cibuildwheel with pipx
      run: >
        pipx run --verbose
        --spec cibuildwheel==2.8.0
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir ${{ inputs.output-dir }}
        2>&1
      shell: bash
      env:
        CIBW_BUILD: "cp38-* cp39-*"
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_X86_64_IMAGE: rapidsai/manylinux:amd64
        CIBW_MANYLINUX_AARCH64_IMAGE: rapidsai/manylinux:arm64
