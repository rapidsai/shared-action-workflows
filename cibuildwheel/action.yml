name: cibuildwheel
description: 'Runs cibuildwheel with some extra logic to assemble CIBW_ env vars'
inputs:
  package-dir:
    description: 'Path to python package'
    required: true
  output-dir:
    description: 'Path to output wheels'
    required: true
  python-version:
    description: 'python version e.g. 3.8'
    required: true
  cuda-suffix:
    description: 'Add a -cu11-style suffix to wheel name'
    required: true
  epoch-timestamp:
    description: 'Epoch timestamp to use as nightly version'
    required: true
  post-repair-amd64:
    description: 'Command to run after auditwheel repair for amd64'
    required: true
  post-repair-arm64:
    description: 'Command to run after auditwheel repair for arm64'
    required: true
  internal-pypi-user:
    description: 'Username for pypi.k8s.rapids.ai'
    required: true
  internal-pypi-pass:
    description: 'Password for pypi.k8s.rapids.ai'
    required: true
  manylinux-ctk-version:
    description: 'Specify which version ctk manylinux image to use'
    required: true
  cibw-before-all-amd64:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands for amd64'
    required: true
  cibw-before-all-arm64:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands for arm64'
    required: true
  cibw-before-build:
    description: 'Extra CIBW_BEFORE_BUILD_LINUX commands'
    required: true
  cibw-environment:
    description: 'CIBW_ENVIRONMENT'
    required: true
  skbuild-configure-options:
    description: 'SKBUILD_CONFIGURE_OPTIONS'
    required: true
  skbuild-build-options:
    description: 'SKBUILD_BUILD_OPTIONS'
    required: true
  sccache-aws-access-key-id:
    required: true
    type: string
  sccache-aws-secret-access-key:
    required: true
    type: string
  sccache-aws-session-token:
    required: true
    type: string

runs:
  using: composite
  steps:
    - name: Create conditional env vars with bash
      run: |
        runner_arch=$(uname -m)

        post_repair="${{ inputs.post-repair-amd64 }}"
        before_all="${{ inputs.cibw-before-all-amd64 }}"
        if [[ "${runner_arch}" == "aarch64" ]]; then
          post_repair="${{ inputs.post-repair-arm64 }}"
          before_all="${{ inputs.cibw-before-all-arm64 }}"
        fi

        # set arch based on runner
        echo "CIBW_ARCHS_LINUX=$runner_arch" >>  "${GITHUB_ENV}"

        # set repair command to append post-repair command
        echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel repair -w {dest_dir} {wheel} && ${post_repair}" >> "${GITHUB_ENV}"

        # set before-all-linux command to store internal pypi credentials before running cibw-before-all
        echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc && ${before_all}" >> "${GITHUB_ENV}"

        # enable sccache in skbuild config options
        skbuild_config_opts="${{ inputs.skbuild-configure-options}}"
        skbuild_config_opts="${skbuild_config_opts} -DCMAKE_C_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=/usr/bin/sccache"

        # convert 3.x to cp3x-*
        python_ver=${{ inputs.python-version }}
        python_ver="${python_ver//./}"
        echo "CIBW_BUILD=cp${python_ver}-*" >> "${GITHUB_ENV}"

        # Use gha-tools rapids-pip-wheel-version to generate wheel version then update the necessary files
        versioneer_override="$(rapids-pip-wheel-version ${{ inputs.epoch-timestamp }})"
        env_var="CIBW_ENVIRONMENT=SKBUILD_CONFIGURE_OPTIONS='${skbuild_config_opts}' SKBUILD_BUILD_OPTIONS='${{ inputs.skbuild-build-options }}' ${{ inputs.cibw-environment }} SCCACHE_S3_KEY_PREFIX=gha-cibw SCCACHE_REGION=us-east-2 SCCACHE_IDLE_TIMEOUT=32768 SCCACHE_BUCKET=rapids-sccache-east SCCACHE_S3_USE_SSL=true AWS_ACCESS_KEY_ID=${{ inputs.sccache-aws-access-key-id }} AWS_SECRET_ACCESS_KEY=${{ inputs.sccache-aws-secret-access-key }} AWS_SESSION_TOKEN=${{ inputs.sccache-aws-session-token }} PIP_INDEX_URL=https://pypi.k8s.rapids.ai/simple PIP_FIND_LINKS=/project/local-wheelhouse"

        bash ci/release/apply_wheel_modifications.sh ${versioneer_override} ${RAPIDS_PY_WHEEL_CUDA_SUFFIX}
        echo "The package name and/or version was modified in the package source. The git diff is:"
        git diff

        # assemble CIBW_ENVIRONMENT from skbuild configure and build options
        echo "${env_var}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Invoke cibuildwheel
      run: >
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir ${{ inputs.output-dir }}
        2>&1
      shell: bash
      env:
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_AARCH64_IMAGE: "rapidsai/manylinux_2_31:cuda-devel-${{ inputs.manylinux-ctk-version }}-ubuntu20.04"
        CIBW_MANYLINUX_X86_64_IMAGE: "rapidsai/manylinux2014:cuda-devel-${{ inputs.manylinux-ctk-version }}-centos7"
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_BEFORE_BUILD_LINUX: ${{ inputs.cibw-before-build }}
        CIBW_BUILD_VERBOSITY_LINUX: 3
