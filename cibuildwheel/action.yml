name: cibuildwheel
description: 'Installs pipx to run cibuildwheel on the current runner with some opinionated settings for RAPIDS'
inputs:
  package-dir:
    description: 'Path to python package'
    required: true
  output-dir:
    description: 'Path to output wheels'
    required: true
  python-version:
    description: 'Python version e.g. 3.8'
    required: true
  auditwheel-repair-command-amd64:
    description: 'Auditwheel repair command amd64'
    required: true
  auditwheel-repair-command-arm64:
    description: 'Auditwheel repair command amd64'
    required: true
  internal-pypi-user:
    description: 'Username for pypi.k8s.rapids.ai'
    required: true
  internal-pypi-pass:
    description: 'Password for pypi.k8s.rapids.ai'
    required: true
  manylinux-container-amd64:
    description: 'Specify which manylinux container to use for amd64'
    required: true
  manylinux-container-arm64:
    description: 'Specify which manylinux container to use for arm64'
    required: true
  cibw-before-all-amd64:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands for amd64'
    required: false
    default: ''
  cibw-before-all-arm64:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands for arm64'
    required: false
    default: ''
  cibw-before-build:
    description: 'Extra CIBW_BEFORE_BUILD_LINUX commands'
    required: false
    default: ''
  cibw-environment:
    description: 'CIBW_ENVIRONMENT'
    required: false
    default: ''
  skbuild-configure-options:
    description: 'SKBUILD_CONFIGURE_OPTIONS'
    required: false
    default: ''
  skbuild-build-options:
    description: 'SKBUILD_BUILD_OPTIONS'
    required: false
    default: ''
  sccache-aws-access-key-id:
    required: true
    type: string
  sccache-aws-secret-access-key:
    required: true
    type: string
  cumlprims_mg-private-deploy-key:
    required: false
    type: string
    default: ''
  cugraph-ops-private-deploy-key:
    required: false
    type: string
    default: ''

runs:
  using: composite
  steps:
    - name: Install python3.8, venv, pip on runner container
      run: sudo apt update -y && sudo apt install -y python3.8-venv python3-venv python3-pip
      shell: bash

    - name: Install pipx
      run: |
        python3 -m pip install pipx
        python3 -m pipx ensurepath --force
      shell: bash

    - name: Create conditional env vars with bash
      run: |
        arch=$(uname -m)

        # set arch according to runner arch
        echo "CIBW_ARCHS_LINUX=${arch}" >> "${GITHUB_ENV}"

        my_container=""
        if [ "${arch}" == "x86_64" ]; then
          my_container="${{ inputs.manylinux-container-amd64 }}"
        elif [ "${arch}" == "aarch64" ]; then
          my_container="${{ inputs.manylinux-container-arm64 }}"
        fi

        cibw_before_all_ssh=""
        # add some commands to set up an ssh agent for cloning private repos like cumlprims_mg and cugraph-ops
        if [ "${{ inputs.cumlprims_mg-private-deploy-key }}" != '' ] || [ "${{ inputs.cugraph-ops-private-deploy-key }}" != '' ]; then
          private_key="${{ inputs.cumlprims_mg-private-deploy-key }}${{ inputs.cugraph-ops-private-deploy-key }}"
          ssh_setup=""

          if [ "${my_container}" == "rapidsai/manylinux2014" ]; then
            ssh_setup="yum install -y openssh openssh-clients && eval \$(ssh-agent) &&"
          else
            ssh_setup="eval \$(ssh-agent) &&"
          fi
          # multiline env var: https://github.com/orgs/community/discussions/24952
          echo 'PRIVATE_SSH_KEY<<EOF' >> "${GITHUB_ENV}"
          echo "$private_key" >> "${GITHUB_ENV}"
          # add a trailing newline to the ssh key: https://stackoverflow.com/questions/52109775/gitlab-ci-ssh-key-invalid-format/59595773#59595773
          echo 'EOF' >> "${GITHUB_ENV}"
          # forward multline env var to cibuildwheel container
          echo "CIBW_ENVIRONMENT_PASS_LINUX=PRIVATE_SSH_KEY" >> "${GITHUB_ENV}"
          # add forwarded multline env var later on, by escaping immediate expansion
          cibw_before_all_ssh="$ssh_setup echo \"\$PRIVATE_SSH_KEY\" | ssh-add - &&"
        fi

        cibw_before_all=""
        auditwheel_repair_command=""
        if [ "${arch}" == "x86_64" ]; then
          cibw_before_all="${{ inputs.cibw-before-all-amd64 }}"
          auditwheel_repair_command="${{ inputs.auditwheel-repair-command-amd64 }}"
        elif [ "${arch}" == "aarch64" ]; then
          cibw_before_all="${{ inputs.cibw-before-all-arm64 }}"
          auditwheel_repair_command="${{ inputs.auditwheel-repair-command-arm64 }}"
        fi
        cibw_before_all="$cibw_before_all_ssh $cibw_before_all"

        # set before-all-linux command to:
        #   1. set up ssh-agent + deploy key for cloning private repos
        #   2. store internal pypi credentials in .netrc
        #   3. append `&& cibw_before_all` if it's not empty
        if [ "${cibw_before_all}" != "" ]; then
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc && ${cibw_before_all}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc" >> "${GITHUB_ENV}"
        fi

        # set repair command based on runner arch
        echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=${auditwheel_repair_command}" >> "${GITHUB_ENV}"

        # set CIBW_BUILD based on input python version e.g. 3.8 -> cp38-*
        py_vers="${{ inputs.python-version }}"
        cibw_build_str=""
        for pyver in $py_vers; do
          cibw_build_str="${cibw_build_str}cp${pyver//./}-* "
        done
        echo "CIBW_BUILD=$cibw_build_str" >> "${GITHUB_ENV}"

        # enable sccache in skbuild config options
        skbuild_config_opts="${{ inputs.skbuild-configure-options}}"
        skbuild_config_opts="${skbuild_config_opts} -DCMAKE_C_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=/usr/bin/sccache"

        # assemble CIBW_ENVIRONMENT from skbuild configure and build options
        # StrictHostKeyChecking=no is to avoid (yes/no) prompt from private repo clone
        echo "CIBW_ENVIRONMENT=GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no' SKBUILD_CONFIGURE_OPTIONS='${skbuild_config_opts}' SKBUILD_BUILD_OPTIONS='${{ inputs.skbuild-build-options }}' ${{ inputs.cibw-environment }} PYTHON_PACKAGE_CUDA_SUFFIX='-cu11' SCCACHE_S3_KEY_PREFIX=gha-cibw SCCACHE_REGION=us-west-2 SCCACHE_IDLE_TIMEOUT=32768 SCCACHE_BUCKET=rapids-sccache AWS_ACCESS_KEY_ID=${{ inputs.sccache-aws-access-key-id }} AWS_SECRET_ACCESS_KEY=${{ inputs.sccache-aws-secret-access-key }}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Invoke cibuildwheel with pipx
      run: >
        pipx run --verbose
        --spec cibuildwheel==2.8.0
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir ${{ inputs.output-dir }}
        2>&1
      shell: bash
      env:
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ inputs.manylinux-container-amd64 }}_x86_64
        CIBW_MANYLINUX_AARCH64_IMAGE: ${{ inputs.manylinux-container-arm64 }}_aarch64
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_BEFORE_BUILD_LINUX: ${{ inputs.cibw-before-build }}
        CIBW_BUILD_VERBOSITY_LINUX: 3
