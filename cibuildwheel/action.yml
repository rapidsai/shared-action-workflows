name: cibuildwheel
description: 'Installs pipx to run cibuildwheel on the current runner with some opinionated settings for RAPIDS'
inputs:
  package-dir:
    description: 'Path to python package'
    required: true
    default: '.'
  output-dir:
    description: 'Path to output wheels to'
    required: true
    default: './dist'
  manylinux-platform:
    description: 'Manylinux platform to repair to'
    required: true
    default: 'manylinux_2_17'
  python-version:
    description: 'Python version'
    required: true
    default: '3.8'
  build-sdist-on:
    description: 'Which arch-pyver combo to build the sdist from'
    required: false
    default: ''
  internal-pypi-user:
    description: 'Username for pypi.k8s.rapids.ai'
    required: false
    default: ''
  internal-pypi-pass:
    description: 'Password for pypi.k8s.rapids.ai'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Install python3.8, venv, pip on runner container
      run: sudo apt update -y && sudo apt install -y python3.8-venv python3-venv python3-pip
      shell: bash

    - name: Install pipx
      run: |
        python3 -m pip install pipx
        python3 -m pipx ensurepath --force
      shell: bash

    - name: Create conditional env vars with bash
      run: |
        arch=$(uname -m)
        pyver=${{ inputs.python-version }}

        # set arch according to runner arch
        echo "CIBW_ARCHS_LINUX=${arch}" >> "${GITHUB_ENV}"

        if [ "${arch}-${pyver}" == "${{ inputs.build-sdist-on }}" ]; then
            echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc && /install-build-requirements.sh {package} && python3 {package}/setup.py sdist -d ${{ inputs.output-dir }}" >> "${GITHUB_ENV}"
        else
            echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc" >> "${GITHUB_ENV}"
        fi

        echo "CIBW_BUILD=cp${pyver//./}-*" >> "${GITHUB_ENV}"
        echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel repair -w {dest_dir} --plat ${{ inputs.manylinux-platform }}_${arch} {wheel}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Invoke cibuildwheel with pipx
      run: >
        pipx run --verbose
        --spec cibuildwheel==2.8.0
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir ${{ inputs.output-dir }}
        2>&1
      shell: bash
      env:
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_X86_64_IMAGE: rapidsai/manylinux:amd64
        CIBW_MANYLINUX_AARCH64_IMAGE: rapidsai/manylinux:arm64
