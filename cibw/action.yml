name: cibuildwheel
description: 'Installs pipx to run cibuildwheel on the current runner with some opinionated settings for RAPIDS'
inputs:
  package-dir:
    description: 'Path to python package'
    required: true
  output-dir:
    description: 'Path to output wheels'
    required: true
  python-version:
    description: 'Python version e.g. 3.8'
    required: true
  internal-pypi-user:
    description: 'Username for pypi.k8s.rapids.ai'
    required: true
  internal-pypi-pass:
    description: 'Password for pypi.k8s.rapids.ai'
    required: true
  cibw-before-all:
    description: 'Extra CIBW_BEFORE_ALL_LINUX commands'
    required: false
    default: ''
  cibw-before-build:
    description: 'Extra CIBW_BEFORE_BUILD_LINUX commands'
    required: false
    default: ''
  cibw-environment:
    description: 'CIBW_ENVIRONMENT'
    required: false
    default: ''
  cibw-test-requires:
    description: 'CIBW_TEST_REQUIRES'
    required: false
    default: ''
  cibw-test-extras:
    description: 'CIBW_TEST_EXTRAS'
    required: false
    default: ''
  cibw-test-command:
    description: 'CIBW_TEST_COMMAND'
    required: false
    default: ''
  skbuild-build-options:
    description: 'SKBUILD_BUILD_OPTIONS'
    required: false
    default: ''
  skbuild-configure-options:
    description: 'SKBUILD_CONFIGURE_OPTIONS'
    required: false
    default: ''
  auditwheel-repair-override:
    description: 'Override default auditwheel repair command'
    required: false
    default: ''
  sccache-enabled:
    required: true
    type: string
  sccache-bucket:
    required: true
    type: string
  sccache-s3-key-prefix:
    required: true
    type: string
  sccache-region:
    required: true
    type: string
  sccache-aws-access-key-id:
    required: true
    type: string
  sccache-aws-secret-access-key:
    required: true
    type: string
  sccache-idle-timeout:
    required: false
    type: string
    default: '32768'

runs:
  using: composite
  steps:
    - name: Install python3.8, venv, pip on runner container
      run: sudo apt update -y && sudo apt install -y python3.8-venv python3-venv python3-pip
      shell: bash

    - name: Install pipx
      run: |
        python3 -m pip install pipx
        python3 -m pipx ensurepath --force
      shell: bash

    - name: Create conditional env vars with bash
      run: |
        arch=$(uname -m)

        # set arch according to runner arch
        echo "CIBW_ARCHS_LINUX=${arch}" >> "${GITHUB_ENV}"

        # set before-all-linux command to:
        #   1. store internal pypi credentials in .netrc
        #   2. append `&& inputs.cibw-before-all` if it's not empty
        if [ "${{ inputs.cibw-before-all }}" != "" ]; then
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc && ${{ inputs.cibw-before-all }}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin ${{ inputs.internal-pypi-user }}\n\tpassword ${{ inputs.internal-pypi-pass }}\n' > ~/.netrc" >> "${GITHUB_ENV}"
        fi

        # try to repair to the widest possible manylinux, starting from 2_17 i.e. manylinux2014 up to 2_31
        if [ "${{ inputs.auditwheel-repair-override }}" == "" ]; then
          echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_17_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_24_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_27_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_28_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_31_${arch} {wheel}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=${{ inputs.auditwheel-repair-override }}" >> "${GITHUB_ENV}"
        fi

        # set CIBW_BUILD based on input python version e.g. 3.8 -> cp38-*
        py_ver=${{ inputs.python-version }}
        echo "CIBW_BUILD=cp${py_ver//./}-*" >> "${GITHUB_ENV}"

        # enable sccache in skbuild config options
        skbuild_config_opts="${{ inputs.skbuild-configure-options}}"
        if [ "${{ inputs.sccache-enabled }}" == "true" ]; then
          skbuild_config_opts="${skbuild_config_opts} -DCMAKE_C_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=/usr/bin/sccache"
        fi

        # assemble CIBW_ENVRRIONMENT from skbuild configure and build options
        echo "CIBW_ENVIRONMENT=SKBUILD_CONFIGURE_OPTIONS='${skbuild_config_opts}' SKBUILD_BUILD_OPTIONS='${{ inputs.skbuild-build-options }}' ${{ inputs.cibw-environment }} SCCACHE_S3_KEY_PREFIX=${{ inputs.sccache-s3-key-prefix}} SCCACHE_REGION=${{ inputs.sccache-region }} SCCACHE_IDLE_TIMEOUT=${{ inputs.sccache-idle-timeout }} SCCACHE_BUCKET=${{ inputs.sccache-bucket }} AWS_ACCESS_KEY_ID=${{ inputs.sccache-aws-access-key-id }} AWS_SECRET_ACCESS_KEY=${{ inputs.sccache-aws-secret-access-key }}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Invoke cibuildwheel with pipx
      run: >
        pipx run --verbose
        --spec cibuildwheel==2.8.0
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir ${{ inputs.output-dir }}
        2>&1
      shell: bash
      env:
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_X86_64_IMAGE: rapidsai/manylinux:amd64
        CIBW_MANYLINUX_AARCH64_IMAGE: rapidsai/manylinux:arm64
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_BEFORE_BUILD_LINUX: ${{ inputs.cibw-before-build }}
        CIBW_BUILD_VERBOSITY_LINUX: 3
        CIBW_TEST_REQUIRES: ${{ inputs.cibw-test-requires }}
        CIBW_TEST_EXTRAS: ${{ inputs.cibw-test-extras }}
        CIBW_TEST_COMMAND: ${{ inputs.cibw-test-command }}
