on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      repo:
        type: string
      node_type:
        type: string
        default: "cpu8"
      script:
        type: string
        default: "ci/build_cpp.sh"
      matrix_filter:
        type: string
        default: "."
      default_endpoint:
        type: string
      traceparent:
        type: string
        description: |
            Opentelemetry traceparent. Format is described in https://medium.com/@mesutatasoy/understanding-traceparent-and-microservices-in-opentelemetry-notepad-series-7-de5c16bf6462
            Generally, 00-<trace_id 32 chars>-<span_id 16 chars>-01

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

env:
  TOP_LEVEL_TRACEPARENT: ${{ inputs.traceparent }}
  OTEL_EXPORTER_OTLP_ENDPOINT: "${{ inputs.default_endpoint }}"
  OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
  OTEL_EXPORTER_OTLP_HEADERS: ${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}
  OTEL_EXPORTER_OTLP_CERTIFICATE: "/tmp/certs/ca.crt"
  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "/tmp/certs/client.crt"
  OTEL_EXPORTER_OTLP_CLIENT_KEY: "/tmp/certs/client.key"
  OTEL_PYTHON_DISABLED_INSTRUMENTATIONS: "jinja2"

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, PY_VER, CUDA_VER, LINUX_VER]
          #
          export MATRIX="
          # amd64
          - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu22.04' }
          - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04' }
          # arm64
          - { ARCH: 'arm64', PY_VER: '3.10', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu22.04' }
          - { ARCH: 'arm64', PY_VER: '3.10', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04' }
          "

          MATRIX="$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  build:
    name:  ${{ matrix.CUDA_VER }}, ${{ matrix.PY_VER }}, ${{ matrix.ARCH }}, ${{ matrix.LINUX_VER }}
    needs: compute-matrix
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-${{ inputs.node_type }}"
    env:
      RAPIDS_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      OTEL_RESOURCE_ATTRIBUTES: "rapids.project=${{ github.event.repository.name }},rapids.operation=test-cpp,rapids.package_type=conda,rapids.cuda=${{matrix.CUDA_VER}},rapids.py=${{matrix.PY_VER}},rapids.arch=${{matrix.ARCH}},rapids.linux=${{matrix.LINUX_VER}}"
    container:
      image: rapidsai/ci-conda:cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
      - name: Get GitHub job info, to obtain machine info
        uses: rapidsai/shared-actions/github-actions-job-info@add-telemetry
        id: job-info
      - name: Add machine details to attributes metadata
        run: |
          labels=$(echo "${{steps.job-info.outputs.job-info}}" | jq '.labels | join(" ")')
          echo OTEL_RESOURCE_ATTRIBUTES="${OTEL_RESOURCE_ATTRIBUTES},${labels}"
      - name: Write certificate files for mTLS
        run: |
          mkdir -p /tmp/certs
          cat << EOF > ${OTEL_EXPORTER_OTLP_CERTIFICATE}
          ${{ secrets.OTEL_EXPORTER_OTLP_CA_CERTIFICATE }}
          EOF
          cat << EOF > ${OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE}
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE }}
          EOF
          cat << EOF > ${OTEL_EXPORTER_OTLP_CLIENT_KEY}
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_KEY }}
          EOF
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Standardize repository information
        run: |
          echo "RAPIDS_REPOSITORY=${{ inputs.repo || github.repository }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_SHA=$(git rev-parse HEAD)" >> "${GITHUB_ENV}"
          echo "RAPIDS_REF_NAME=${{ inputs.branch || github.ref_name }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_NIGHTLY_DATE=${{ inputs.date }}" >> "${GITHUB_ENV}"

      # Temporary until https://github.com/rapidsai/ci-imgs/pull/196 is merged
      - name: Install OpenTelemetry instrumentation
        run: |
          pip install opentelemetry-distro[otlp] \
              opentelemetry-exporter-prometheus \
              git+https://github.com/msarahan/opentelemetry-python-contrib.git@add-conda-build-instrumentation#subdirectory=instrumentation/opentelemetry-instrumentation-conda-build
          opentelemetry-bootstrap -a install

      - name: Setup proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main

      - name: Telemetry setup
        id: job-traceparent
        uses: rapidsai/shared-actions/telemetry-traceparent@add-telemetry

      - name: C++ build
        run: ${{ inputs.script }}
        env:
          STEP_NAME: "C++ build"
          GH_TOKEN: ${{ github.token }}
          TRACEPARENT: ${{ steps.job-traceparent.outputs.traceparent }}
      - name: Upload additional artifacts
        if: "!cancelled()"
        run: rapids-upload-artifacts-dir cuda${RAPIDS_CUDA_VERSION%%.*}_$(arch)
      - name: Telemetry summary
        id: telemetry-summary
        if: "always()"
        continue-on-error: true
        uses: rapidsai/shared-actions/telemetry-summarize@add-telemetry
        with:
          traceparent: "${{ env.TOP_LEVEL_TRACEPARENT }}"
