name: Build RAPIDS manylinux wheels

on:
  workflow_call:
    inputs:
      # repo and branch
      repo:
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      build_type:
        required: true
        type: string

      # allow a bigger runner instance
      node_type:
        required: false
        type: string
        default: "cpu16"

      # general settings
      package-name:
        required: true
        type: string
      package-dir:
        required: true
        type: string
      matrix_filter:
        type: string
        default: "."

      # Extra repository that will be cloned into the project directory.
      extra-repo:
        required: false
        type: string
        default: ''
      extra-repo-sha:
        required: false
        type: string
        default: ''
      # Note that this is the _name_ of a secret containing the key, not the key itself.
      extra-repo-deploy-key:
        required: false
        type: string
        default: ''

      # Run command before building the wheel
      before-wheel:
        type: string
        required: false
        default: 'true'

      # Run command after auditwheel
      post-repair-amd64:
        required: false
        type: string
        default: 'true'
      post-repair-arm64:
        required: false
        type: string
        default: 'true'

      skbuild-configure-options:
        required: false
        type: string
        default: ''
      skbuild-build-options:
        required: false
        type: string
        default: ''

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  wheel-epoch-timestamp:
    name: wheel epoch timestamper
    runs-on: ubuntu-latest
    outputs:
      rapids_epoch_timestamp: ${{ steps.get_epoch_time.outputs.rapids_epoch_timestamp }}

    steps:
    - name: Get epoch timestamp to use as nightly version
      id: get_epoch_time
      run: echo "RAPIDS_EPOCH_TIMESTAMP=$(date +%s)" >> "${GITHUB_OUTPUT}"

  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          export MATRIX="
          - { ctk: '11.8.0', arch: 'amd64', python: '3.9', image: 'rapidsai/manylinux_v2_2014:cuda-devel-11.8.0-centos7'}
          - { ctk: '11.8.0', arch: 'amd64', python: '3.10', image: 'rapidsai/manylinux_v2_2014:cuda-devel-11.8.0-centos7' }
          - { ctk: '11.8.0', arch: 'arm64', python: '3.9', image: 'rapidsai/manylinux_v2_2_31:cuda-devel-11.8.0-ubuntu20.04' }
          - { ctk: '11.8.0', arch: 'arm64', python: '3.10', image: 'rapidsai/manylinux_v2_2_31:cuda-devel-11.8.0-ubuntu20.04' }
          "

          echo "MATRIX=$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | {include: .}' \
          )" | tee --append "${GITHUB_OUTPUT}"

  wheel-build:
    name: cibuildwheel ${{ matrix.arch }} ${{ matrix.python }} ${{ matrix.ctk }}
    needs: [wheel-epoch-timestamp, compute-matrix]
    strategy:
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.arch }}-${{ inputs.node_type }}"
    container:
      image: "${{ matrix.image }}"

      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
        RAPIDS_PY_VERSION: ${{ matrix.python }}

    steps:
    - uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 43200 # 12h
    - name: checkout code repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Standardize repository information
      uses: rapidsai/shared-action-workflows/rapids-github-info@branch-23.06
      with:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch }}
        date: ${{ inputs.date }}
        sha: ${{ inputs.sha }}

    - name: Preprocess extra repos
      id: preprocess-extras
      if: ${{ inputs.extra-repo != '' }}
      run: |
        EXTRA_REPO_PATH=$(echo ${{ inputs.extra-repo }} | cut -d "/"  -f 2)
        echo "EXTRA_REPO_PATH=${EXTRA_REPO_PATH}" >> $GITHUB_OUTPUT

    - name: checkout extra repos
      uses: actions/checkout@v3
      if: ${{ inputs.extra-repo != '' }}
      with:
        repository: ${{ inputs.extra-repo }}
        ref: ${{ inputs.extra-repo-sha }}
        path: ${{ inputs.package-dir }}/${{ steps.preprocess-extras.outputs.EXTRA_REPO_PATH }}
        ssh-key: ${{ secrets[inputs.extra-repo-deploy-key] }}
        persist-credentials: false

    - name: Set CTK-related vars from input CTK versions
      uses: rapidsai/shared-action-workflows/wheel-ctk-name-gen@branch-23.06
      with:
        ctk: ${{ matrix.ctk }}
        package-name: ${{ inputs.package-name }}

    - name: Apply wheel modifications
      run: |
        # Use gha-tools rapids-pip-wheel-version to generate wheel version then
        # update the necessary files
        versioneer_override="$(rapids-pip-wheel-version ${{ needs.wheel-epoch-timestamp.outputs.rapids_epoch_timestamp }})"

        bash ci/release/apply_wheel_modifications.sh ${versioneer_override} ${{ env.RAPIDS_PY_WHEEL_CUDA_SUFFIX }}
        echo "The package name and/or version was modified in the package source. The git diff is:"
        git diff

    - name: Build and repair the wheel
      run: |
        pyenv global ${{ matrix.python }}

        # Run before-wheel command
        ${{ inputs.before-wheel }}

        cd "${{ inputs.package-dir }}"

        # sccache configuration
        export SCCACHE_S3_KEY_PREFIX=gha-cibw
        export SCCACHE_REGION=us-east-2
        export SCCACHE_IDLE_TIMEOUT=32768
        export SCCACHE_BUCKET=rapids-sccache-east
        export SCCACHE_S3_USE_SSL=true
        export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
        export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}

        # Set up skbuild options. Enable sccache in skbuild config options
        export SKBUILD_CONFIGURE_OPTIONS="${{ inputs.skbuild-configure-options}} -DCMAKE_C_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=/usr/bin/sccache"
        export SKBUILD_BUILD_OPTIONS="${{ inputs.skbuild-build-options }}"

        # Set up for pip installation of dependencies from the nightly index
        export PIP_EXTRA_INDEX_URL=https://pypi.k8s.rapids.ai/simple

        # Store internal pypi credentials before any step that may download wheels
        printf 'machine pypi.k8s.rapids.ai\n\tlogin cibuildwheel\n\tpassword ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}\n' > ~/.netrc

        # Hardcode the output dir
        python -m pip wheel . -w dist -vvv --no-deps

        # Repair the wheel
        cd dist
        if [[ "${{ matrix.arch }}" == "amd64" ]]; then
          python -m auditwheel repair -w . ${{ inputs.package-name }}* --plat manylinux_2_17_x86_64
        else
          python -m auditwheel repair -w . ${{ inputs.package-name }}* --plat manylinux_2_31_aarch64
        fi

        if [[ "${{ matrix.arch }}" == "arm64" ]]; then
          ${{ inputs.post-repair-arm64 }}
        else
          ${{ inputs.post-repair-amd64 }}
        fi

        # Need to pick the final wheel out from all the dependencies and the
        # pre-repaired wheel.
        cd ..
        mkdir final_dist
        mv dist/${{ inputs.package-name }}*manylinux* final_dist
      # Use a shell that loads the rc file so that we get the compiler settings
      shell: bash -leo pipefail {0}

    - name: Upload wheels to downloads.rapids.ai
      run: rapids-upload-wheels-to-s3 "${{ inputs.package-dir }}"/final_dist
