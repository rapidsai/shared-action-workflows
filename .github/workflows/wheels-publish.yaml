name: Publish RAPIDS wheels

on:
  workflow_call:
    inputs:
      # repo and branch
      repo:
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      build_type:
        required: true
        type: string

      # general settings
      package-name:
        required: true
        type: string
      package-type:
        required: false
        default: python
        type: string
      publish_to_pypi:
        required: false
        type: boolean
        default: false
      # telemetry
      default_endpoint:
        type: string
        description: "Destination to send telemetry to, not including path like /v1/traces"
      traceparent:
        type: string
        description: |
            Opentelemetry traceparent. Format is described in https://medium.com/@mesutatasoy/understanding-traceparent-and-microservices-in-opentelemetry-notepad-series-7-de5c16bf6462
            Generally, 00-<trace_id 32 chars>-<span_id 16 chars>-01
      otel_resource_attributes:
        type: string
        description: |
          Comma-separated key=value pairs used for storing additional "tags" to better identify data
      shared_actions_repo:
        type: string
        description: git repo for rapidsai/shared-actions code
        default: rapidsai/shared-actions
      shared_actions_ref:
        type: string
        description: git ref of branch/tag/sha for rapidsai/shared-actions repo
        default: main

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  wheel-publish:
    name: wheels publish
    runs-on: linux-amd64-cpu4
    container:
      # CUDA toolkit version of the container is irrelevant in the publish step.
      # This just uploads already-built wheels to remote storage.
      image: "rapidsai/ci-wheel:latest"
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 43200 # 12h

    - name: checkout code repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Checkout actions
      uses: actions/checkout@v4
      with:
        repository: ${{inputs.shared_actions_repo}}
        ref: ${{inputs.shared_actions_ref}}
        path: ./shared-actions

    - name: Standardize repository information
      uses: ./shared-actions/rapids-github-info
      with:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch }}
        date: ${{ inputs.date }}
        sha: ${{ inputs.sha }}

    - name: Download wheels from downloads.rapids.ai and publish to anaconda repository
      run: rapids-wheels-anaconda "${{ inputs.package-name }}" "${{ inputs.package-type }}"
      env:
        RAPIDS_CONDA_TOKEN: ${{ secrets.CONDA_RAPIDSAI_WHEELS_NIGHTLY_TOKEN }}

    - name: Check if build is release
      id: check_if_release
      shell: bash
      if: ${{ inputs.publish_to_pypi }}
      run: |
        if rapids-is-release-build; then
          echo "is_release_build=true" | tee -a ${GITHUB_OUTPUT}
        else
          echo "is_release_build=false" | tee -a ${GITHUB_OUTPUT}
        fi

    - name: Publish the downloaded wheels to PyPI
      if: ${{ inputs.publish_to_pypi && steps.check_if_release.outputs.is_release_build == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.RAPIDSAI_PYPI_TOKEN }}

    - name: Telemetry summary
      id: telemetry-summary
      if: "always()"
      uses: ./shared-actions/telemetry-summarize
      with:
        traceparent: "${{ inputs.traceparent }}"
        ca_cert: "${{secrets.OTEL_EXPORTER_OTLP_CA_CERTIFICATE}}"
        client_cert: "${{secrets.OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE}}"
        client_key: "${{secrets.OTEL_EXPORTER_OTLP_CLIENT_KEY}}"