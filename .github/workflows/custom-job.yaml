on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      repo:
        type: string
      arch:
        type: string
        default: "amd64"
      node_type:
        type: string
        default: "cpu8"
      container_image:
        type: string
        default: "rapidsai/ci-conda:latest"
      run_script:
        required: true
        type: string
      # telemetry settings: Destination to send telemetry to
      default_endpoint:
        type: string
      # defaults to <default_endpoint>/v1/traces
      # Change it if you want to send to a different host or port number
      traces_endpoint:
        type: string
      # defaults to <default_endpoint>/v1/metrics
      # Change it if you want to send to a different host or port number
      metrics_endpoint:
        type: string
      # defaults to <default_endpoint>/v1/logs
      # Change it if you want to send to a different host or port number
      logs_endpoint:
        type: string
      traceparent:
        type: string
        description: |
            Opentelemetry traceparent. Format is described in https://medium.com/@mesutatasoy/understanding-traceparent-and-microservices-in-opentelemetry-notepad-series-7-de5c16bf6462
            Generally, 00-<trace_id 32 chars>-<span_id 16 chars>-01

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

env:
  TOP_LEVEL_TRACEPARENT: ${{ inputs.traceparent }}
  OTEL_EXPORTER_OTLP_ENDPOINT: "${{ inputs.default_endpoint }}"
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "${{ inputs.traces_endpoint }}"
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "${{ inputs.metrics_endpoint }}"
  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "${{ inputs.logs_endpoint }}"
  OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
  OTEL_EXPORTER_OTLP_HEADERS: ${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}
  OTEL_EXPORTER_OTLP_CERTIFICATE: "/tmp/certs/ca.crt"
  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "/tmp/certs/client.crt"
  OTEL_EXPORTER_OTLP_CLIENT_KEY: "/tmp/certs/client.key"

jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: "linux-${{ inputs.arch }}-${{ inputs.node_type }}"
    container:
      image: ${{ inputs.container_image }}
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      # Temporary until ci-imgs build with
      # https://github.com/rapidsai/gha-tools/commit/8bd8fca71b5fae38b1493c547d15e73da40b32e1#diff-f1f054b2906bfd36ad706ed2fa6aa028fa529e65b25167e4ca7ca45546d59ed8R14
      # is available. The PR is merged, but at time of writing, no ci-imgs builds have been released to pick it up.
      - name: Download gha-tools with git clone
        run: |
            git clone https://github.com/msarahan/gha-tools.git -b add-telemetry-traceparent-scripts /tmp/gha-tools
            echo "/tmp/gha-tools/tools" >> "${GITHUB_PATH}"

      - name: Telemetry setup
        id: job-traceparent
        uses: rapidsai/shared-actions/telemetry-traceparent@add-telemetry
      - name: Write certificate files for mTLS
        run: |
          mkdir -p /tmp/certs
          cat << EOF > ${OTEL_EXPORTER_OTLP_CERTIFICATE}
          ${{ secrets.OTEL_EXPORTER_OTLP_CA_CERTIFICATE }}
          EOF
          cat << EOF > ${OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE}
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE }}
          EOF
          cat << EOF > ${OTEL_EXPORTER_OTLP_CLIENT_KEY}
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_KEY }}
          EOF

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Get PR Info
        if: startsWith(github.ref_name, 'pull-request/')
        id: get-pr-info
        uses: nv-gha-runners/get-pr-info@main
      - name: Add PR Info
        if: startsWith(github.ref_name, 'pull-request/')
        run: |
          echo "RAPIDS_BASE_BRANCH=${{ fromJSON(steps.get-pr-info.outputs.pr-info).base.ref }}" >> "${GITHUB_ENV}"
      - name: Standardize repository information
        run: |
          echo "RAPIDS_NIGHTLY_DATE=${{ inputs.date }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_REF_NAME=${{ inputs.branch || github.ref_name }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_REPOSITORY=${{ inputs.repo || github.repository }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_SHA=$(git rev-parse HEAD)" >> "${GITHUB_ENV}"

      # Temporary until https://github.com/rapidsai/ci-imgs/pull/196 is merged
      - name: Install OpenTelemetry instrumentation
        run: |
          pip install opentelemetry-distro[otlp] \
              opentelemetry-exporter-prometheus \
              git+https://github.com/msarahan/opentelemetry-python-contrib.git@add-conda-build-instrumentation#subdirectory=instrumentation/opentelemetry-instrumentation-conda-build
          opentelemetry-bootstrap -a install

      - name: Run script
        run: ${{ inputs.run_script }}
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload file to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gh-status
          path: gh-status.json
          if-no-files-found: ignore
      - name: Telemetry summary
        id: telemetry-summary
        if: "always()"
        uses: rapidsai/shared-actions/telemetry-summarize@add-telemetry
        with:
          traceparent: "${{ env.TOP_LEVEL_TRACEPARENT }}"
