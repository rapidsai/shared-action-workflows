name: Test RAPIDS wheels

on:
  workflow_call:
    inputs:
      # repo and branch
      repo:
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      build_type:
        required: true
        type: string
      script:
        type: string
        default: "ci/test_wheel.sh"
      matrix_filter:
        type: string
        default: "."
      container-options:
        required: false
        type: string
        default: "-e _NOOP"
      test_summary_show:
        required: false
        type: string
        default: "fail"
      default_endpoint:
        type: string
        description: "Destination to send telemetry to, not including path like /v1/traces"
      traceparent:
        type: string
        description: |
            Opentelemetry traceparent. Format is described in https://medium.com/@mesutatasoy/understanding-traceparent-and-microservices-in-opentelemetry-notepad-series-7-de5c16bf6462
            Generally, 00-<trace_id 32 chars>-<span_id 16 chars>-01
      otel_resource_attributes:
        type: string
        description: |
          Comma-separated key=value pairs used for storing additional "tags" to better identify data
      shared_actions_repo:
        type: string
        description: git repo for rapidsai/shared-actions code
        default: rapidsai/shared-actions
      shared_actions_ref:
        type: string
        description: git ref of branch/tag/sha for rapidsai/shared-actions repo
        default: main
    # the use of secrets in shared-workflows is discouraged, especially for public repositories.
    # these values were added for situations where the use of secrets is unavoidable.
    secrets:
      RAPIDS_AUX_SECRET_1:
        required: false

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

env:
  # TODO: this should be set as an org-wide variable
  OTEL_EXPORTER_OTLP_ENDPOINT: "${{ inputs.default_endpoint }}"
  OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
  OTEL_PYTHON_DISABLED_INSTRUMENTATIONS: "jinja2"

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ inputs.build_type }}
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Validate test type
        run: |
          if [[ "$BUILD_TYPE" != "pull-request" ]] && [[ "$BUILD_TYPE" != "nightly" ]]; then
              echo "Invalid build type! Must be 'nightly' or 'pull-request'."
              exit 1
          fi
      - name: Compute test matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, PY_VER, CUDA_VER, LINUX_VER, GPU, DRIVER, DEPENDENCIES]
          #
          export MATRICES="
            pull-request:
              # amd64
              - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu24.04', GPU: 'v100', DRIVER: 'latest',   DEPENDENCIES: 'oldest' }
              # arm64
              - { ARCH: 'arm64', PY_VER: '3.12', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu20.04', GPU: 'a100', DRIVER: 'latest',   DEPENDENCIES: 'latest' }
            nightly:
              # amd64
              - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '11.8.0', LINUX_VER: 'rockylinux8', GPU: 'v100', DRIVER: 'latest',   DEPENDENCIES: 'oldest' }
              - { ARCH: 'amd64', PY_VER: '3.11', CUDA_VER: '12.0.1', LINUX_VER: 'ubuntu20.04', GPU: 'v100', DRIVER: 'latest',   DEPENDENCIES: 'latest' }
              - { ARCH: 'amd64', PY_VER: '3.12', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04', GPU: 'v100', DRIVER: 'earliest', DEPENDENCIES: 'latest' }
              - { ARCH: 'amd64', PY_VER: '3.12', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu24.04', GPU: 'v100', DRIVER: 'latest',   DEPENDENCIES: 'latest' }
              # arm64
              - { ARCH: 'arm64', PY_VER: '3.10', CUDA_VER: '11.8.0', LINUX_VER: 'rockylinux8', GPU: 'a100', DRIVER: 'latest',   DEPENDENCIES: 'oldest' }
              - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'ubuntu20.04', GPU: 'a100', DRIVER: 'latest',   DEPENDENCIES: 'latest' }
              - { ARCH: 'arm64', PY_VER: '3.12', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu24.04', GPU: 'a100', DRIVER: 'latest',   DEPENDENCIES: 'latest' }
          "

          TEST_MATRIX=$(yq -n 'env(MATRICES) | .[strenv(BUILD_TYPE)]')
          export TEST_MATRIX

          MATRIX="$(
            yq -n -o json 'env(TEST_MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  test:
    name: ${{ matrix.CUDA_VER }}, ${{ matrix.PY_VER }}, ${{ matrix.ARCH }}, ${{ matrix.LINUX_VER }}, ${{ matrix.GPU }}, ${{ matrix.DRIVER }}-driver, ${{ matrix.DEPENDENCIES }}-deps
    needs: compute-matrix
    env:
      RAPIDS_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      RAPIDS_DEPENDENCIES: ${{ matrix.DEPENDENCIES }}
      RAPIDS_TESTS_DIR: ${{ github.workspace }}/test-results
      OTEL_RESOURCE_ATTRIBUTES: "${{inputs.otel_resource_attributes}},rapids.operation=wheels-test,rapids.package_type=wheel,rapids.cuda=${{matrix.CUDA_VER}},rapids.py=${{matrix.PY_VER}},rapids.arch=${{matrix.ARCH}},rapids.linux=${{matrix.LINUX_VER}},rapids.gpu=${{matrix.GPU}},rapids.driver=${{matrix.DRIVER}},rapids.deps=${{matrix.DEPENDENCIES}}"
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-gpu-${{ matrix.GPU }}-${{ matrix.DRIVER }}-1"
    container:
      image: "rapidsai/citestwheel:cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}"
      options: ${{ inputs.container-options }}
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 43200 # 12h
    - name: Run nvidia-smi to make sure GPU is working
      run: nvidia-smi

    - name: checkout code repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Checkout actions
      uses: actions/checkout@v4
      with:
        repository: ${{inputs.shared_actions_repo}}
        ref: ${{inputs.shared_actions_ref}}
        path: ./shared-actions

    - name: Standardize repository information
      uses: ./shared-actions/rapids-github-info
      with:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch }}
        date: ${{ inputs.date }}
        sha: ${{ inputs.sha }}

    - name: Run tests
      run: ${{ inputs.script }}
      env:
        GH_TOKEN: ${{ github.token }}
        RAPIDS_AUX_SECRET_1: ${{ secrets.RAPIDS_AUX_SECRET_1 }}

    - name: Generate test report
      uses: test-summary/action@v2.4
      with:
        paths: "${{ env.RAPIDS_TESTS_DIR }}/*.xml"
        show: ${{ inputs.test_summary_show }}
      if: always()

    - name: Upload additional artifacts
      if: "!cancelled()"
      run: rapids-upload-artifacts-dir cuda${RAPIDS_CUDA_VERSION%%.*}_$(arch)_py${RAPIDS_PY_VERSION//.}
    - name: Get GitHub job info, to obtain machine info
      uses: ./shared-actions/github-actions-job-info
      id: job-info
    - name: Add machine details to attributes metadata
      run: |
        labels=$(echo "${{steps.job-info.outputs.job-info}}" | jq -r '.labels | join(" ")')
        echo OTEL_RESOURCE_ATTRIBUTES="${OTEL_RESOURCE_ATTRIBUTES},rapids.labels=${labels}" >> ${GITHUB_ENV}

    - name: Telemetry summary
      id: telemetry-summary
      if: "always()"
      uses: ./shared-actions/telemetry-summarize
      with:
        traceparent: "${{ inputs.traceparent }}"
        ca_cert: "${{secrets.OTEL_EXPORTER_OTLP_CA_CERTIFICATE}}"
        client_cert: "${{secrets.OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE}}"
        client_key: "${{secrets.OTEL_EXPORTER_OTLP_CLIENT_KEY}}"