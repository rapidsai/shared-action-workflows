name: Build RAPIDS project wheels

on:
  workflow_call:
    inputs:
      # repo and branch
      repo:
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      build_type:
        required: true
        type: string

      package-name:
        required: true
        type: string
      package-dir:
        required: true
        type: string

      # versioneer and twine settings
      versioneer-override:
        required: false
        type: string
        default: ''

jobs:
  wheel-epoch-timestamp:
    name: wheel epoch timestamper
    runs-on: ubuntu-latest
    outputs:
      rapids_epoch_timestamp: ${{ steps.get_epoch_time.outputs.rapids_epoch_timestamp }}

    steps:
    - name: Get epoch timestamp to use as nightly version
      id: get_epoch_time
      run: echo "RAPIDS_EPOCH_TIMESTAMP=$(date +%s)" >> "${GITHUB_OUTPUT}"

  wheel-build:
    name: wheel build pure ${{ matrix.ctk }}
    needs: wheel-epoch-timestamp
    strategy:
      matrix:
        ctk: ["11.5.1"]
    runs-on: ubuntu-latest
    container:
      image: "rapidsai/cibuildwheel:cuda-runtime-${{ matrix.ctk }}-ubuntu20.04"
    steps:
    - name: checkout code repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Standardize repository information
      shell: bash
      run: |
        echo "RAPIDS_REPOSITORY=${{ inputs.repo || github.repository }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        sha="${{ inputs.sha }}"
        if [[ "${sha}" == "" ]]; then
          sha=$(git rev-parse HEAD)
        fi
        echo "RAPIDS_SHA=${sha}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        echo "RAPIDS_REF_NAME=${{ inputs.branch || github.ref_name }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        echo "RAPIDS_NIGHTLY_DATE=${{ inputs.date }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"

    - name: Set CTK-related vars from input CTK versions
      run: |
        ctk_tag="${{ matrix.ctk }}"
        ctk_major=$(echo $ctk_tag | cut -d'.' -f1)
        cuda_suffix="-cu${ctk_major}"

        echo "RAPIDS_PY_WHEEL_CUDA_SUFFIX=${cuda_suffix}" >> "${GITHUB_ENV}"

        wheelname="${{ inputs.package-name }}_cu${ctk_major}"
        echo "RAPIDS_PY_WHEEL_NAME=${wheelname}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Build pure python wheel with pip wheel
      run: |
        versioneer_override="${{ inputs.python-package-versioneer-override }}"

        if [ "${versioneer_override}" == "" ]; then
          versioneer_override="$(rapids-pip-wheel-version ${{ needs.wheel-epoch-timestamp.outputs.rapids_epoch_timestamp }})"
        fi
          
        export RAPIDS_PY_WHEEL_VERSIONEER_OVERRIDE="${versioneer_override}"
        python -m pip wheel -w ./dist ${{ inputs.package-dir }} --no-deps
      shell: bash

    - name: Upload wheels to downloads.rapids.ai
      run: rapids-upload-wheels-to-s3 dist
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
        RAPIDS_PY_VERSION: "3.8"
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
