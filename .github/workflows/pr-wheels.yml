name: Build RAPIDS project wheels

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      package-dir:
        required: true
        type: string
      python-version:
        required: true
        type: string
      cibw-before-all:
        required: false
        type: string
        default: ''
      cibw-before-build:
        required: false
        type: string
        default: ''
      skbuild-configure-options:
        required: false
        type: string
        default: ''
      skbuild-build-options:
        required: false
        type: string
        default: ''
      cibw-environment:
        required: false
        type: string
        default: ''
      cpu-smoketest:
        required: true
        type: string
      gpu-smoketest:
        required: false
        type: string
        default: ''
      auditwheel-repair-override:
        required: false
        type: string
        default: ''

jobs:
  wheel-build:
    name: cibuildwheel ${{ matrix.labels[2] }} ${{ inputs.python-version }}
    runs-on: ${{ matrix.labels }}
    strategy:
      matrix:
        labels: [[self-hosted, linux, amd64, cpu16], [self-hosted, linux, arm64, cpu16]]
    steps:
    - name: checkout code repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # unshallow fetch for setuptools-scm

    - name: Install python3.8, venv, pip on runner container
      run: sudo apt update -y && sudo apt install -y python3.8-venv python3-venv python3-pip

    - name: Install pipx
      run: |
        python3 -m pip install pipx
        python3 -m pipx ensurepath --force

    - name: Create conditional CIBW env vars with bash
      run: |
        arch=$(uname -m)

        # set arch according to runner arch
        echo "CIBW_ARCHS_LINUX=${arch}" >> "${GITHUB_ENV}"

        # set before-all-linux command to:
        #   1. store internal pypi credentials in .netrc
        #   2. append `&& inputs.cibw-before-all` if it's not empty
        if [ "${{ inputs.cibw-before-all }}" != "" ]; then
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin cibuildwheel\n\tpassword ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}\n' > ~/.netrc && ${{ inputs.cibw-before-all }}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_BEFORE_ALL_LINUX=printf 'machine pypi.k8s.rapids.ai\n\tlogin cibuildwheel\n\tpassword ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}\n' > ~/.netrc" >> "${GITHUB_ENV}"
        fi

        # try to repair to the widest possible manylinux, starting from 2_17 i.e. manylinux2014 up to 2_28
        if [ "${{ inputs.auditwheel-repair-override }}" == "" ]; then
          echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_17_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_24_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_27_${arch} {wheel} || auditwheel --verbose repair -w {dest_dir} --plat manylinux_2_28_${arch} {wheel}" >> "${GITHUB_ENV}"
        else
          echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=${{ inputs.auditwheel-repair-override }}" >> "${GITHUB_ENV}"
        fi

        # set CIBW_BUILD based on input python version e.g. 3.8 -> cp38-*
        py_ver=${{ inputs.python-version }}
        echo "CIBW_BUILD=cp${py_ver//./}-*" >> "${GITHUB_ENV}"

    - name: Invoke cibuildwheel with pipx
      run: >
        pipx run --verbose
        --spec cibuildwheel==2.8.0
        cibuildwheel
        ${{ inputs.package-dir }}
        --output-dir dist
        2>&1
      env:
        CIBW_SKIP: "*musllinux*"
        CIBW_MANYLINUX_X86_64_IMAGE: rapidsai/manylinux:amd64
        CIBW_MANYLINUX_AARCH64_IMAGE: rapidsai/manylinux:arm64
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_BEFORE_BUILD_LINUX: ${{ inputs.cibw-before-build }}
        CIBW_ENVIRONMENT: "SKBUILD_CONFIGURE_OPTIONS='${{ inputs.skbuild-configure-options}}' SKBUILD_BUILD_OPTIONS='${{ inputs.skbuild-build-options }}' ${{ inputs.cibw-environment }}"
        CIBW_BUILD_VERBOSITY_LINUX: 3

    - name: Download gha-tools
      run: |
        wget https://github.com/rapidsai/gha-tools/releases/latest/download/tools.tar.gz -O - | sudo tar -xz -C /usr/local/bin
        pip install awscli

    - name: Upload wheels to downloads.rapids.ai
      run: rapids-upload-wheels-to-s3 dist
      env:
        RAPIDS_BUILD_TYPE: "pull-request"
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        RAPIDS_PY_VER: ${{ inputs.python-version }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}

  wheel-gpu-test:
    name: wheel GPU test ${{ matrix.labels[2] }} ${{ inputs.python-version }}
    runs-on: ${{ matrix.labels }}
    strategy:
      matrix:
        labels: [[self-hosted, linux, amd64, gpu-v100-495-1]] # add second runner once an ARM GPU node is available
    needs: wheel-build
    if: "${{ inputs.gpu-smoketest != '' }}"
    container:
      image: rapidsai/wheelsmoketest:${{ inputs.python-version }}-${{ matrix.labels[2] }}
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
        GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }} # gha-tools needs these
        GITHUB_SHA: ${{ env.GITHUB_SHA }}
        GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
        RAPIDS_PY_VER: ${{ inputs.python-version }}
        RAPIDS_BUILD_TYPE: "pull-request"
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Run GPU smoketest for wheel
        run: /wheelsmoketest.sh "${{ inputs.gpu-smoketest }}"

  wheel-cpu-test:
    name: wheel CPU test ${{ matrix.labels[2] }} ${{ inputs.python-version }}
    runs-on: ${{ matrix.labels }}
    strategy:
      matrix:
        labels: [[self-hosted, linux, amd64, cpu4], [self-hosted, linux, arm64, cpu4]]
    needs: wheel-build
    if: "${{ inputs.cpu-smoketest != '' }}"
    container:
      image: rapidsai/wheelsmoketest:${{ inputs.python-version }}-${{ matrix.labels[2] }}
      env:
        GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }} # gha-tools needs these
        GITHUB_SHA: ${{ env.GITHUB_SHA }}
        GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
        RAPIDS_PY_VER: ${{ inputs.python-version }}
        RAPIDS_BUILD_TYPE: "pull-request"
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Run CPU smoketest for wheel
        run: /wheelsmoketest.sh "${{ inputs.cpu-smoketest }}"

  wheel-publish:
    name: wheel publish ${{ matrix.labels[2] }} ${{ inputs.python-version }}
    runs-on: ${{ matrix.labels }}
    needs: [wheel-build, wheel-gpu-test, wheel-cpu-test]
    if: |
      always() &&
      needs.wheel-build.result == 'success' &&
      (needs.wheel-gpu-test.result == 'success' || needs.wheel-gpu-test.result == 'skipped') &&
      (needs.wheel-cpu-test.result == 'success' || needs.wheel-cpu-test.result == 'skipped')
    strategy:
      matrix:
        labels: [[self-hosted, linux, amd64, cpu4], [self-hosted, linux, arm64, cpu4]]
    steps:
    - name: Download gha-tools
      run: |
        wget https://github.com/rapidsai/gha-tools/releases/latest/download/tools.tar.gz -O - | sudo tar -xz -C /usr/local/bin
        pip install awscli

    - name: Download wheels from downloads.rapids.ai
      run: rapids-download-wheels-from-s3 ./dist
      env:
        RAPIDS_BUILD_TYPE: "pull-request"
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        RAPIDS_PY_VER: ${{ inputs.python-version }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}

    - name: Publish wheels to RAPIDS internal PyPI
      run: |
        pip install twine
        twine upload ./dist/"${{ inputs.package-name }}*.whl"
      env:
        TWINE_USERNAME: cibuildwheel
        TWINE_PASSWORD: ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}
        TWINE_REPOSITORY_URL: "https://pypi.k8s.rapids.ai/simple/"
