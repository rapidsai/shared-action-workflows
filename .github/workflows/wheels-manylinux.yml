name: Build RAPIDS manylinux wheels

on:
  workflow_call:
    inputs:
      # repo and branch
      repo:
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      build-type:
        required: true
        type: string

      # general settings
      package-name:
        required: true
        type: string
      package-dir:
        required: true
        type: string
      python-package-cuda-suffix:
        required: false
        type: string
        default: '-cu11'

      # Extra repository that will be cloned into the project directory.
      extra-repo:
        required: false
        type: string
        default: ''
      extra-repo-sha:
        required: false
        type: string
        default: ''
      # Note that this is the _name_ of a secret containing the key, not the key itself.
      extra-repo-deploy-key: 
        required: false
        type: string
        default: ''

      # versioneer and twine settings
      python-package-versioneer-override:
        required: false
        type: string
        default: ''
      python-package-build-tag:
        required: false
        type: string
        default: ''

      # cibw settings
      manylinux-ctk:
        type: string
        required: false
        default: '115'
      cibw-environment:
        type: string
        required: false
        default: ''
      cibw-before-all-amd64:
        required: false
        type: string
        default: 'true'
      cibw-before-all-arm64:
        required: false
        type: string
        default: 'true'
      cibw-before-build:
        required: false
        type: string
        default: 'true'
      post-repair-amd64:
        required: false
        type: string
        default: 'true'
      post-repair-arm64:
        required: false
        type: string
        default: 'true'

      skbuild-configure-options:
        required: false
        type: string
        default: ''
      skbuild-build-options:
        required: false
        type: string
        default: ''

      # test settings
      test-docker-options:
        required: false
        type: string
        default: '-e _NOOP'
      test-checkout-src: # allow one to skip checking out source code to run packaged tests
        required: false
        type: string
        default: 'true'
      test-unittest: # tests are allowed to be blank because the wheel is installed and pip checked
        required: false
        type: string
        default: ''
      test-before-amd64:
        required: false
        type: string
        default: 'true'
      test-before-arm64:
        required: false
        type: string
        default: 'true'

jobs:
  wheel-epoch-timestamp:
    name: wheel epoch timestamper
    runs-on: ubuntu-latest
    outputs:
      rapids_epoch_timestamp: ${{ steps.get_epoch_time.outputs.rapids_epoch_timestamp }}

    steps:
    - name: Get epoch timestamp to use as nightly version
      id: get_epoch_time
      run: echo "RAPIDS_EPOCH_TIMESTAMP=$(date +%s)" >> "${GITHUB_OUTPUT}"

  wheel-build:
    name: cibuildwheel ${{ matrix.arch }} ${{ matrix.python }}
    needs: wheel-epoch-timestamp
    strategy:
      matrix:
        python: [3.8, 3.9]
        arch: [amd64, arm64]
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
      - cpu16
    container:
      image: "rapidsai/cibuildwheel_${{ matrix.arch }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      env:
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        RAPIDS_PY_WHEEL_CUDA_SUFFIX: ${{ inputs.python-package-cuda-suffix }}
        RAPIDS_BUILD_TYPE: ${{ inputs.build-type }}
        RAPIDS_PY_VERSION: ${{ matrix.python }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}

    outputs:
      rapids_repository: ${{ steps.get_repo_info.outputs.rapids_repository }}
      rapids_sha: ${{ steps.get_repo_info.outputs.rapids_sha }}
      rapids_ref_name: ${{ steps.get_repo_info.outputs.rapids_ref_name }}
      rapids_nightly_date: ${{ steps.get_repo_info.outputs.rapids_nightly_date }}

    steps:
    - name: checkout code repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Standardize repository information
      id: get_repo_info
      run: |
        echo "RAPIDS_REPOSITORY=${{ inputs.repo || github.repository }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        echo "RAPIDS_SHA=$(git rev-parse HEAD)" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        echo "RAPIDS_REF_NAME=${{ inputs.branch || github.ref_name }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"
        echo "RAPIDS_NIGHTLY_DATE=${{ inputs.date }}" | tee --append "${GITHUB_ENV}" "${GITHUB_OUTPUT}"

    - name: Preprocess extra repos
      id: preprocess-extras
      if: ${{ inputs.extra-repo != '' }}
      run: |
        EXTRA_REPO_PATH=$(echo ${{ inputs.extra-repo }} | cut -d "/"  -f 2)
        echo "EXTRA_REPO_PATH=${EXTRA_REPO_PATH}" >> $GITHUB_OUTPUT

    - name: checkout extra repos
      uses: actions/checkout@v3
      if: ${{ inputs.extra-repo != '' }}
      with:
        repository: ${{ inputs.extra-repo }}
        ref: ${{ inputs.extra-repo-sha }}
        path: ${{ steps.preprocess-extras.outputs.EXTRA_REPO_PATH }}
        ssh-key: ${{ secrets[inputs.extra-repo-deploy-key] }}
        persist-credentials: false

    - name: Build wheels with cibuildwheel action
      uses: rapidsai/shared-action-workflows/cibuildwheel@upkeep/manylinux-improvements
      with:
        # hardcoded
        output-dir: dist

        # matrix settings
        python-version: ${{ matrix.python }}
        cibw-before-all-amd64: ${{ inputs.cibw-before-all-amd64 }}
        cibw-before-all-arm64: ${{ inputs.cibw-before-all-arm64 }}
        post-repair-amd64: ${{ inputs.post-repair-amd64 }}
        post-repair-arm64: ${{ inputs.post-repair-arm64 }}

        # pre-picked epoch timestamp to use for all wheels
        python-package-epoch-timestamp: ${{ needs.wheel-epoch-timestamp.outputs.rapids_epoch_timestamp }}

        # user inputs
        manylinux-ctk: ${{ inputs.manylinux-ctk }}
        package-name: ${{ inputs.package-name }}
        package-dir: ${{ inputs.package-dir }}
        python-package-versioneer-override: ${{ inputs.python-package-versioneer-override }}
        python-package-cuda-suffix: ${{ inputs.python-package-cuda-suffix }}
        cibw-environment: ${{ inputs.cibw-environment }}
        cibw-before-build: ${{ inputs.cibw-before-build }}
        skbuild-configure-options: ${{ inputs.skbuild-configure-options }}
        skbuild-build-options: ${{ inputs.skbuild-build-options }}

        # secrets
        sccache-aws-access-key-id: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        sccache-aws-secret-access-key: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
        internal-pypi-user: cibuildwheel
        internal-pypi-pass: ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}

    - name: Upload wheels to downloads.rapids.ai
      run: |
        rapids-upload-wheels-to-s3 dist

  wheel-test:
    name: wheel test ${{ matrix.arch }} ${{ matrix.python }}
    needs: wheel-build
    strategy:
      matrix:
        include:
          - { arch: amd64, python: 3.8, gpu: gpu-v100-495-1 }
          - { arch: arm64, python: 3.8, gpu: gpu-a100-495-1 }
          - { arch: amd64, python: 3.9, gpu: gpu-v100-495-1 }
          - { arch: arm64, python: 3.9, gpu: gpu-a100-495-1 }
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
      - ${{ matrix.gpu }}
    container:
      image: "rapidsai/citestwheel_${{ matrix.arch }}"
      options: ${{ inputs.test-docker-options }}
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        RAPIDS_PY_VERSION: ${{ matrix.python }}
        RAPIDS_BUILD_TYPE: ${{ inputs.build-type }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
        RAPIDS_BEFORE_TEST_COMMANDS_AMD64: ${{ inputs.test-before-amd64 }}
        RAPIDS_BEFORE_TEST_COMMANDS_ARM64: ${{ inputs.test-before-arm64 }}
        CIBW_TEST_EXTRAS: "test"
        CIBW_TEST_COMMAND: ${{ inputs.test-unittest }}
        PIP_EXTRA_INDEX_URL: "https://pypi.k8s.rapids.ai/simple"
    steps:
    - name: Run nvidia-smi to make sure GPU is working
      run: nvidia-smi

    - name: Install private index credentials in cibuildwheel container
      run: printf 'machine pypi.k8s.rapids.ai\n\tlogin cibuildwheel\n\tpassword ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}\n' > ~/.netrc

    - name: checkout code repo
      uses: actions/checkout@v3
      if: ${{ inputs.test-checkout-src == 'true' }}
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Get repository information from build step
      run: |
        echo "RAPIDS_REPOSITORY=${{ needs.wheel-build.outputs.rapids_repository }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_SHA=${{ needs.wheel-build.outputs.rapids_sha }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_REF_NAME=${{ needs.wheel-build.outputs.rapids_ref_name }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_NIGHTLY_DATE=${{ needs.wheel-build.outputs.rapids_nightly_date }}" >> "${GITHUB_ENV}"

    - name: Run citestwheel
      run: /citestwheel.sh

  wheel-publish:
    name: wheels publish all wheels
    needs: [wheel-build, wheel-test]
    runs-on: ubuntu-latest
    container:
      image: rapidsai/cibuildwheel_x86_64
      env:
        RAPIDS_PY_WHEEL_NAME: ${{ inputs.package-name }}
        RAPIDS_PY_WHEEL_BUILD_TAG: ${{ inputs.python-package-build-tag }}
        RAPIDS_BUILD_TYPE: ${{ inputs.build-type }}
        AWS_ACCESS_KEY_ID: ${{ secrets.RAPIDSAI_GHA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAPIDSAI_GHA_AWS_SECRET_ACCESS_KEY }}
        TWINE_USERNAME: cibuildwheel
        TWINE_PASSWORD: ${{ secrets.RAPIDSAI_PYPI_CI_PASSWORD }}
        TWINE_REPOSITORY_URL: "https://pypi.k8s.rapids.ai/simple/"
    steps:
    - name: Get repository information from build step
      run: |
        echo "RAPIDS_REPOSITORY=${{ needs.wheel-build.outputs.rapids_repository }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_SHA=${{ needs.wheel-build.outputs.rapids_sha }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_REF_NAME=${{ needs.wheel-build.outputs.rapids_ref_name }}" >> "${GITHUB_ENV}"
        echo "RAPIDS_NIGHTLY_DATE=${{ needs.wheel-build.outputs.rapids_nightly_date }}" >> "${GITHUB_ENV}"

    - name: Download wheels from downloads.rapids.ai and publish to internal PyPI
      run: |
        RAPIDS_ARCH="x86_64" RAPIDS_PY_VERSION="3.8" rapids-download-wheels-from-s3 ./dist
        RAPIDS_ARCH="x86_64" RAPIDS_PY_VERSION="3.9" rapids-download-wheels-from-s3 ./dist
        RAPIDS_ARCH="aarch64" RAPIDS_PY_VERSION="3.8" rapids-download-wheels-from-s3 ./dist
        RAPIDS_ARCH="aarch64" RAPIDS_PY_VERSION="3.9" rapids-download-wheels-from-s3 ./dist
        rapids-twine ./dist/
